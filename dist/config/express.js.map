{"version":3,"sources":["../source/config/express.js"],"names":["app","use","bodyParser","json","limit","swaggerUI","serve","setup","swaggerSpecs","routes","req","res","next","Boom","notFound","error","console","log","isBoom","status","output","payload","statusCode","name","message","boomifiedError","boomify"],"mappings":";;;;;;;AAAA;;AACA;;AAIA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AARA;AACA;AACA;AAQA,MAAMA,GAAG,GAAG,uBAAZ,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAA,GAAG,CAACC,GAAJ,CAAQ,oBAAR,E,CAEA;;AACAD,GAAG,CAACC,GAAJ,CAAQC,oBAAWC,IAAX,CAAgB;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAhB,CAAR,E,CAEA;;AACAJ,GAAG,CAACC,GAAJ,CAAQ,kBAAR,EAA4BI,0BAAUC,KAAtC,EAA6CD,0BAAUE,KAAV,CAAgBC,oBAAhB,CAA7C,E,CAEA;;AACAR,GAAG,CAACC,GAAJ,CAAQ,SAAR,EAAmBQ,cAAnB,E,CAEA;;AACAT,GAAG,CAACC,GAAJ,CAAQ,wBAAR;AAEAD,GAAG,CAACC,GAAJ,CAAQ,GAAR,EAAa,CAACS,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC/BA,EAAAA,IAAI,CAACC,cAAKC,QAAL,CAAc,eAAd,CAAD,CAAJ;AACD,CAFD,E,CAGA;;AACAd,GAAG,CAACC,GAAJ,CAAQ,CAACc,KAAD,EAAQL,GAAR,EAAaC,GAAb,EAAkBC,IAAlB,KAA2B;AACjCI,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;;AACA,MAAIF,cAAKK,MAAL,CAAYH,KAAZ,CAAJ,EAAwB;AACtBJ,IAAAA,GAAG,CAACQ,MAAJ,CAAWJ,KAAK,CAACK,MAAN,CAAaC,OAAb,CAAqBC,UAAhC,EAA4CnB,IAA5C,CAAiDY,KAAK,CAACK,MAAN,CAAaC,OAA9D;AACD,GAFD,MAEO,IAAIN,KAAK,CAACI,MAAN,KAAiB,GAArB,EAA0B;AAC/BR,IAAAA,GAAG,CAACQ,MAAJ,CAAWJ,KAAK,CAACI,MAAjB,EAAyBhB,IAAzB,CAA8B;AAC5BmB,MAAAA,UAAU,EAAEP,KAAK,CAACI,MADU;AAE5BJ,MAAAA,KAAK,EAAEA,KAAK,CAACQ,IAFe;AAG5BC,MAAAA,OAAO,EAAET,KAAK,CAACS;AAHa,KAA9B;AAKD,GANM,MAMA;AACL,UAAMC,cAAc,GAAGZ,cAAKa,OAAL,CAAaX,KAAb,EAAoB;AAAEI,MAAAA,MAAM,EAAE;AAAV,KAApB,CAAvB;;AACAR,IAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBhB,IAAhB,CAAqBsB,cAAc,CAACL,MAAf,CAAsBC,OAA3C;AACD;AACF,CAdD;eAgBerB,G","sourcesContent":["import express from 'express';\nimport cors from 'cors';\n// import util from 'util';\n// import appRoot from 'app-root-path';\n// import fs from 'fs';\nimport bodyParser from 'body-parser';\nimport { errors } from 'celebrate';\nimport swaggerUI from 'swagger-ui-express';\nimport Boom from '@hapi/boom';\nimport swaggerSpecs from './swaggerspec';\nimport routes from '../apis/index';\n\nconst app = express();\n\n// eslint-disable-next-line no-unused-vars\n// app.get('/', async (req, res, next) => {\n//   const readFileAsync = util.promisify(fs.readFile);\n//   console.log(`${appRoot}/source/apis/auth/baseurl.js`);\n//   console.log(await readFileAsync(`${appRoot}/source/apis/auth/baseurl.js`));\n//   return res(\n//     (await readFileAsync(`${appRoot}/source/apis/auth/baseurl.js`)).toString(\n//       'utf-8'\n//     )\n//   );\n// })();\n\n// CORS acces setup\napp.use(cors());\n\n// request body parser\napp.use(bodyParser.json({ limit: '50MB' }));\n\n// Swagger UI\napp.use('/api/v1/api-docs', swaggerUI.serve, swaggerUI.setup(swaggerSpecs));\n\n// Binding routes\napp.use('/api/v1', routes);\n\n// Error handler for celebrate\napp.use(errors());\n\napp.use('/', (req, res, next) => {\n  next(Boom.notFound('URL not found'));\n});\n// eslint-disable-next-line no-unused-vars\napp.use((error, req, res, next) => {\n  console.log(error);\n  if (Boom.isBoom(error)) {\n    res.status(error.output.payload.statusCode).json(error.output.payload);\n  } else if (error.status === 401) {\n    res.status(error.status).json({\n      statusCode: error.status,\n      error: error.name,\n      message: error.message,\n    });\n  } else {\n    const boomifiedError = Boom.boomify(error, { status: 500 });\n    res.status(500).json(boomifiedError.output.payload);\n  }\n});\n\nexport default app;\n"],"file":"express.js"}