{"version":3,"sources":["../source/index.js"],"names":["server","app","listen","env","PORT","console","log"],"mappings":";;AAIA;;AACA;;;;AALA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,MAAM,GAAGC,iBAAIC,MAAJ,CAAWC,aAAIC,IAAf,EAAqB,MAAM;AACxCC,EAAAA,OAAO,CAACC,GAAR,CAAa,0BAAyBH,aAAIC,IAAK,GAA/C;AACD,CAFc,CAAf,C,CAIA;AACA;AACA","sourcesContent":["/* eslint-disable no-unused-vars */\n// import util from 'util';\n// import appRoot from 'app-root-path';\n// import fs from 'fs';\nimport app from './config/express';\nimport env from './config/env';\n// import initiateMongoConnection from './config/mongo_connection';\n// import initiateRedisConnection from './config/redis_connection';\n\n// (async () => {\n//   const readFileAsync = util.promisify(fs.readFile);\n//   const writeFileAsync = util.promisify(fs.writeFile);\n//   const mkDirAsync = util.promisify(fs.mkdir);\n// console.log(`${appRoot}/source/apis/auth/routes/logout.js`);\n\n// const str = (\n//   await readFileAsync(`${appRoot}/source/apis/auth/models/user.js`)\n// ).toString();\n// console.log(str.split('schema').join(\"{ username : {type : 'string'}}\"));\n// await writeFileAsync(\n//   './test.js',\n//   str.split(\"'schema'\").join(\"{ username : {\\ntype : 'string'\\n}\\n}\")\n// );\n\n//   await Promise.all(\n//     [\n//       `${appRoot}/source/apis/sample/controllers/fileName_get.js`,\n//       `${appRoot}/source/apis/sample/controllers/fileName_delete.js`,\n//       `${appRoot}/source/apis/sample/controllers/fileName_post.js`,\n//       `${appRoot}/source/apis/sample/controllers/fileName_put.js`,\n//       `${appRoot}/source/apis/sample/routes/fileName_get.js`,\n//       `${appRoot}/source/apis/sample/routes/fileName_delete.js`,\n//       `${appRoot}/source/apis/sample/routes/fileName_post.js`,\n//       `${appRoot}/source/apis/sample/routes/fileName_put.js`,\n//       `${appRoot}/source/apis/sample/baseurl.js`,\n//       `${appRoot}/source/apis/sample/services/create_fileName.js`,\n//       `${appRoot}/source/apis/sample/services/delete_fileName_in_db.js`,\n//       `${appRoot}/source/apis/sample/services/get_fileName_in_db.js`,\n//       `${appRoot}/source/apis/sample/services/update_fileName_in_db.js`,\n//       `${appRoot}/source/apis/sample/services/index.js`,\n//       `${appRoot}/source/apis/sample/models/modelName.js`,\n//     ].map(async (route) => {\n//       await mkDirAsync(\n//         route\n//           .split('/')\n//           .slice(0, route.split('/').length - 1)\n//           .join('/')\n//           .replace('sample', 'holograms'),\n//         { recursive: true }\n//       );\n//       const obj = {\n//         apiName: 'Holograms',\n//         fileName: 'holograms',\n//         modelName: 'holograms',\n//       };\n//       const stringInFile = (await readFileAsync(route)).toString();\n\n//       await writeFileAsync(\n//         route\n//           .split('fileName')\n//           .join(obj.fileName)\n//           .replace('sample', obj.fileName)\n//           .split('modelName')\n//           .join(obj.modelName),\n//         stringInFile\n//           .split('apiName')\n//           .join(obj.apiName)\n//           .split('fileName')\n//           .join(obj.fileName)\n//           .split('modelName')\n//           .join(obj.modelName)\n//       );\n//     })\n//   );\n// })();\n\n// // Connect to mongo server\n// (async () => {\n//   await initiateMongoConnection();\n// })();\n\n// // Connect to redis server\n// (async () => {\n//   await initiateRedisConnection();\n// })();\n// app.get('/health', async (req, res, _next) => {\n//   const readFileAsync = util.promisify(fs.readFile);\n//   res.send(await readFileAsync(`${appRoot}/source/apis/auth/baseurl.js`));\n// });\n\nconst server = app.listen(env.PORT, () => {\n  console.log(`Server running on port ${env.PORT}!`);\n});\n\n// server.keepAliveTimeout = 600 * 1000;\n// server.headersTimeout = 950 * 1000;\n// server.timeout = 1200 * 1000;\n"],"file":"index.js"}