{"version":3,"sources":["../source/apis/users/routes/users_get.js"],"names":["router","express","Router","userLocationSchema","query","divisionId","Joi","string","search","limit","number","offset","role","userType","all","bool","get","baseUrl","secret","env","JWT_SECRET","isRevoked","getLoggedInUser","getUsersByLocation"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,GAAGC,iBAAQC,MAAR,EAAf;;AAEA,MAAMC,kBAAkB,GAAG;AACzBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,UAAU,EAAEC,eAAIC,MAAJ,EADP;AAELC,IAAAA,MAAM,EAAEF,eAAIC,MAAJ,EAFH;AAGLE,IAAAA,KAAK,EAAEH,eAAII,MAAJ,EAHF;AAILC,IAAAA,MAAM,EAAEL,eAAII,MAAJ,EAJH;AAKLE,IAAAA,IAAI,EAAEN,eAAIC,MAAJ,EALD;AAMLM,IAAAA,QAAQ,EAAEP,eAAIC,MAAJ,EANL;AAOLO,IAAAA,GAAG,EAAER,eAAIS,IAAJ;AAPA;AADkB,CAA3B;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4FAf,MAAM,CAACgB,GAAP,CACG,GAAEC,gBAAQ,EADb,EAEE,yBAAW;AACTC,EAAAA,MAAM,EAAEC,aAAIC,UADH;AAETC,EAAAA,SAAS,EAAE;AAFF,CAAX,CAFF,EAME,0BAAUlB,kBAAV,CANF,EAOEmB,0BAPF,EAQEC,kBARF;eAWevB,M","sourcesContent":["import express from 'express';\nimport expressJWT from 'express-jwt';\nimport { Joi, celebrate } from 'celebrate';\nimport getUsersByLocation from '../controllers/users_get';\nimport { baseUrl } from '../baseurl';\nimport env from '../../../config/env';\nimport { getIsRevokedCallBackForAccessToken } from '../../../helpers/revokeToken/checkRevokedToken';\nimport getLoggedInUser from '../../../middlewares/get_loggedIn_user';\n\nconst router = express.Router();\n\nconst userLocationSchema = {\n  query: {\n    divisionId: Joi.string(),\n    search: Joi.string(),\n    limit: Joi.number(),\n    offset: Joi.number(),\n    role: Joi.string(),\n    userType: Joi.string(),\n    all: Joi.bool(),\n  },\n};\n\n/**\n * @swagger\n * /users:\n *   get:\n *     tags:\n *       - Users\n *     description: It returns the list of users.\n *     consumes:\n *       - application/json\n *     parameters:\n *      - in: \"query\"\n *        name: divisionId\n *        description: \"It takes a division id to pass the list of users\"\n *        required: true\n *        schema:\n *           type: object\n *           properties:\n *              divisionId :\n *                  type: string\n *      - in: \"query\"\n *        name: role\n *        description: \"It takes a role id to pass the list of users having that role\"\n *        required: true\n *        schema:\n *           type: object\n *           properties:\n *              role :\n *                  type: string\n *      - in: \"query\"\n *        name: \"limit\"\n *        description: \"Sets the number of users to be returned\"\n *        schema:\n *          type: object\n *          properties:\n *             limit:\n *                 type: number\n *      - in: \"query\"\n *        name: \"offset\"\n *        description: \"Sets the offset to the list of users\"\n *        schema:\n *          type: object\n *          properties:\n *             offset:\n *                 type: number\n *      - in: \"query\"\n *        name: \"userType\"\n *        description: \"userType can be one of['vv,wv']\"\n *        schema:\n *          type: object\n *          properties:\n *             userType:\n *                 type: string\n *      - in: \"query\"\n *        name: \"all\"\n *        description: A boolean value to include disabled users\n *        schema:\n *          type: object\n *          properties:\n *             all:\n *                 type: boolean\n *     produces:\n *       - application/json\n *     responses:\n *       200:\n *         description: A JSON object\n *         schema:\n *           type: object\n *           properties:\n *              userId:\n *                  type: string\n *              firstName:\n *                  type: string\n *              lastName:\n *                  type: string\n *              mobileNumber:\n *                  type: string\n *              email:\n *                  type: string\n *       400:\n *         description: Returns 400 if userId or password are invalid\n *         schema:\n *           type: object\n *           properties:\n *              statusCode:\n *                  type: number\n *                  example: 400\n *              error:\n *                  type: string\n *              message:\n *                  type: string\n */\n\nrouter.get(\n  `${baseUrl}`,\n  expressJWT({\n    secret: env.JWT_SECRET,\n    isRevoked: getIsRevokedCallBackForAccessToken(),\n  }),\n  celebrate(userLocationSchema),\n  getLoggedInUser,\n  getUsersByLocation\n);\n\nexport default router;\n"],"file":"users_get.js"}