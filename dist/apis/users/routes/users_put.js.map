{"version":3,"sources":["../source/apis/users/routes/users_put.js"],"names":["router","express","Router","userSchema","body","Joi","array","items","object","_id","string","userDetails","userId","mobileNumber","email","firstName","lastName","profileImage","role","type","locationAccess","divisionType","divisionLevel","number","division","put","baseUrl","secret","env","JWT_SECRET","isRevoked","getLoggedInUser","updateUsers"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,GAAGC,iBAAQC,MAAR,EAAf;;AAEA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,IAAI,EAAEC,eAAIC,KAAJ,GAAYC,KAAZ,CACJF,eAAIG,MAAJ,CAAW;AACTC,IAAAA,GAAG,EAAEJ,eAAIK,MAAJ,EADI;AAETC,IAAAA,WAAW,EAAEN,eAAIG,MAAJ,CAAW;AACtBI,MAAAA,MAAM,EAAEP,eAAIK,MAAJ,EADc;AAEtBG,MAAAA,YAAY,EAAER,eAAIK,MAAJ,EAFQ;AAGtBI,MAAAA,KAAK,EAAET,eAAIK,MAAJ,GAAaI,KAAb,EAHe;AAItBC,MAAAA,SAAS,EAAEV,eAAIK,MAAJ,EAJW;AAKtBM,MAAAA,QAAQ,EAAEX,eAAIK,MAAJ,EALY;AAMtBO,MAAAA,YAAY,EAAEZ,eAAIK,MAAJ,EANQ;AAOtBQ,MAAAA,IAAI,EAAEb,eAAIK,MAAJ,EAPgB;AAQtBS,MAAAA,IAAI,EAAEd,eAAIK,MAAJ,EARgB;AAStBU,MAAAA,cAAc,EAAEf,eAAIC,KAAJ,GAAYC,KAAZ,CACdF,eAAIG,MAAJ,CAAW;AACTa,QAAAA,YAAY,EAAEhB,eAAIK,MAAJ,EADL;AAETY,QAAAA,aAAa,EAAEjB,eAAIkB,MAAJ,EAFN;AAGTC,QAAAA,QAAQ,EAAEnB,eAAIK,MAAJ;AAHD,OAAX,CADc;AATM,KAAX;AAFJ,GAAX,CADI;AADW,CAAnB;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EAV,MAAM,CAACyB,GAAP,CACG,GAAEC,gBAAQ,EADb,EAEE,yBAAW;AACTC,EAAAA,MAAM,EAAEC,aAAIC,UADH;AAETC,EAAAA,SAAS,EAAE;AAFF,CAAX,CAFF,EAME,0BAAU3B,UAAV,CANF,EAOE4B,0BAPF,EAQEC,kBARF;eAUehC,M","sourcesContent":["import express from 'express';\nimport expressJWT from 'express-jwt';\nimport { Joi, celebrate } from 'celebrate';\nimport updateUsers from '../controllers/users_put';\nimport { baseUrl } from '../baseurl';\nimport env from '../../../config/env';\nimport { getIsRevokedCallBackForAccessToken } from '../../../helpers/revokeToken/checkRevokedToken';\nimport getLoggedInUser from '../../../middlewares/get_loggedIn_user';\n\nconst router = express.Router();\n\nconst userSchema = {\n  body: Joi.array().items(\n    Joi.object({\n      _id: Joi.string(),\n      userDetails: Joi.object({\n        userId: Joi.string(),\n        mobileNumber: Joi.string(),\n        email: Joi.string().email(),\n        firstName: Joi.string(),\n        lastName: Joi.string(),\n        profileImage: Joi.string(),\n        role: Joi.string(),\n        type: Joi.string(),\n        locationAccess: Joi.array().items(\n          Joi.object({\n            divisionType: Joi.string(),\n            divisionLevel: Joi.number(),\n            division: Joi.string(),\n          })\n        ),\n      }),\n    })\n  ),\n};\n\n/**\n * @swagger\n * /users:\n *   put:\n *     tags:\n *       - Users\n *     description: It takes user details and updates a users.\n *     consumes:\n *       - application/json\n *     produces:\n *       - application/json\n *     parameters:\n *       - in: \"body\"\n *         name: \"body\"\n *         description: \"Required user details\"\n *         required: true\n *         schema:\n *          type: array\n *          items:\n *              type: object\n *              properties:\n *                  _id:\n *                      type: string\n *                  userDetails:\n *                      type: object\n *                      properties:\n *                         userId:\n *                             type: string\n *                         firstName:\n *                             type: string\n *                         lastName:\n *                             type: string\n *                         mobileNumber:\n *                             type: string\n *                         email:\n *                             type: string\n *                         profileImage:\n *                             type: string\n *                         locationAccess:\n *                             type: array\n *                             items:\n *                               type: object\n *                               properties:\n *                                 divisionType:\n *                                   type: string\n *                                 divisionLevel:\n *                                   type: number\n *                                 division:\n *                                   type: string\n *                         role:\n *                             type: string\n *                         type:\n *                             type: string\n *     responses:\n *       200:\n *         description: A JSON object\n *         schema:\n *           type: object\n *           properties:\n *              message:\n *                  type: string\n *       400:\n *         description: Returns 400 if userId or password are invalid\n *         schema:\n *           type: object\n *           properties:\n *              statusCode:\n *                  type: number\n *                  example: 400\n *              error:\n *                  type: string\n *              message:\n *                  type: string\n */\n\nrouter.put(\n  `${baseUrl}`,\n  expressJWT({\n    secret: env.JWT_SECRET,\n    isRevoked: getIsRevokedCallBackForAccessToken(),\n  }),\n  celebrate(userSchema),\n  getLoggedInUser,\n  updateUsers\n);\nexport default router;\n"],"file":"users_put.js"}