{"version":3,"sources":["../source/apis/users/routes/user_get_by_id.js"],"names":["router","express","Router","get","baseUrl","secret","env","JWT_SECRET","isRevoked","getLoggedInUser","getUser"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,GAAGC,iBAAQC,MAAR,EAAf;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDAF,MAAM,CAACG,GAAP,CACG,GAAEC,gBAAQ,KADb,EAEE,yBAAW;AACTC,EAAAA,MAAM,EAAEC,aAAIC,UADH;AAETC,EAAAA,SAAS,EAAE;AAFF,CAAX,CAFF,EAMEC,0BANF,EAOEC,wBAPF;eAUeV,M","sourcesContent":["import express from 'express';\nimport expressJWT from 'express-jwt';\nimport getUser from '../controllers/users_get_by_id';\nimport { baseUrl } from '../baseurl';\nimport env from '../../../config/env';\nimport { getIsRevokedCallBackForAccessToken } from '../../../helpers/revokeToken/checkRevokedToken';\nimport getLoggedInUser from '../../../middlewares/get_loggedIn_user';\n\nconst router = express.Router();\n\n/**\n * @swagger\n * /users/me:\n *   get:\n *     tags:\n *       - Users\n *     description: It returns the details of logged-in user.\n *     consumes:\n *       - application/json\n *     produces:\n *       - application/json\n *     responses:\n *       200:\n *         description: A JSON object\n *         schema:\n *           type: object\n *           properties:\n *              userId:\n *                  type: string\n *              firstName:\n *                  type: string\n *              lastName:\n *                  type: string\n *              mobileNumber:\n *                  type: string\n *              email:\n *                  type: string\n *              role:\n *                  type: object\n *                  properties:\n *                      _id:\n *                          type: string\n *                      roleName:\n *                          type: string\n *                      roleLevel:\n *                          type: number\n *                      assignedLocationLevels:\n *                          type: array\n *                          items:\n *                              type: number\n *       400:\n *         description: Returns 400 if userId or password are invalid\n *         schema:\n *           type: object\n *           properties:\n *              statusCode:\n *                  type: number\n *                  example: 400\n *              error:\n *                  type: string\n *              message:\n *                  type: string\n */\n\nrouter.get(\n  `${baseUrl}/me`,\n  expressJWT({\n    secret: env.JWT_SECRET,\n    isRevoked: getIsRevokedCallBackForAccessToken(),\n  }),\n  getLoggedInUser,\n  getUser\n);\n\nexport default router;\n"],"file":"user_get_by_id.js"}