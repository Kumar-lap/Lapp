{"version":3,"sources":["../source/apis/users/services/save_users_in_file.js"],"names":["parseCSV","fileStream","UserAccounts","Users","Papa","parse","delimiter","newline","quoteChar","escapeChar","header","transformHeader","undefined","dynamicTyping","preview","encoding","worker","comments","step","complete","result","error","download","downloadRequestHeaders","downloadRequestBody","skipEmptyLines","chunk","parser","pause","usersWithValidMobileNumbers","data","filter","user","mobileRegex","mobileNumber","match","validUsers","map","locationAccess","divisionLevel","divisionType","division","District","trim","PC","AC","Mandal","Secretariat","location","firstName","lastName","userId","email","role","type","_id","credentials","password","isFirstLogin","insertMany","ordered","resume","fastMode","beforeFirstChunk","withCredentials","transform","delimitersToGuess","RECORD_SEP","UNIT_SEP","chunkSize","message"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport Papa from 'papaparse';\nimport UsersModel from '../models/user';\nimport UserAccountsModel from '../../auth/models/user';\n\nexport default function parseCSV(fileStream) {\n  const UserAccounts = UserAccountsModel();\n  const Users = UsersModel();\n\n  Papa.parse(fileStream, {\n    delimiter: ',', // auto-detect\n    newline: '', // auto-detect\n    quoteChar: '\"',\n    escapeChar: '\"',\n    header: true,\n    transformHeader: undefined,\n    dynamicTyping: false,\n    preview: 0,\n    encoding: 'utf8',\n    worker: false,\n    comments: false,\n    step: undefined,\n    complete: async (result) => {},\n    error: undefined,\n    download: false,\n    downloadRequestHeaders: undefined,\n    downloadRequestBody: undefined,\n    skipEmptyLines: false,\n    chunk: async (result, parser) => {\n      parser.pause();\n      const usersWithValidMobileNumbers = result.data.filter((user) => {\n        const mobileRegex = /^[0][1-9]\\d{9}$|^[1-9]\\d{9}$/;\n        const { mobileNumber } = user;\n        const match = mobileNumber.match(mobileRegex);\n        return match;\n      });\n      const validUsers = usersWithValidMobileNumbers\n        .map((user) => {\n          return {\n            locationAccess: [\n              {\n                divisionLevel: 1,\n                divisionType: 'District',\n                division: user.District.trim(),\n              },\n              {\n                divisionLevel: 1,\n                divisionType: 'PC',\n                division: user.PC.trim(),\n              },\n              {\n                divisionLevel: 1,\n                divisionType: 'AC',\n                division: user.AC.trim(),\n              },\n              {\n                divisionLevel: 1,\n                divisionType: 'Mandal',\n                division: user.Mandal.trim(),\n              },\n              {\n                divisionLevel: 1,\n                divisionType: 'Secretariat',\n                division: user.Secretariat.trim(),\n              },\n            ].filter((location) => location.division),\n            firstName: user.firstName,\n            lastName: user.lastName,\n            userId: user.userId,\n            mobileNumber: `+91${user.mobileNumber}`,\n            email: user.email,\n            role: user.role.trim(),\n            type: user.type,\n            _id: user.userId,\n          };\n        })\n        .filter(\n          (user) =>\n            user.firstName &&\n            user.lastName &&\n            user.mobileNumber &&\n            user.role &&\n            user.userId\n        );\n      const credentials = validUsers.map((user) => ({\n        userId: user.userId,\n        password: 'password',\n        isFirstLogin: true,\n      }));\n      await Users.insertMany(validUsers, { ordered: false });\n      await UserAccounts.insertMany(credentials, { ordered: false });\n      parser.resume();\n    },\n    fastMode: undefined,\n    beforeFirstChunk: undefined,\n    withCredentials: undefined,\n    transform: undefined,\n    delimitersToGuess: [',', '\\t', '|', ';', Papa.RECORD_SEP, Papa.UNIT_SEP],\n    chunkSize: 2 * 1024 * 1024,\n  });\n  return { message: 'Users uploaded successfully' };\n}\n"],"file":"save_users_in_file.js"}