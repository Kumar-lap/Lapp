{"version":3,"sources":["../source/apis/users/services/validate_users.js"],"names":["validateUsers","users","Users","duplicateUserIds","map","user","userId","groupBy","pickBy","x","length","keys","value","Boom","badRequest","join","duplicateMobileNumbers","mobileNumber","oldUsers","find","select","oldUserIds","newUsers","filter","indexOf","usersWithInvalidEmailIds","emailRegex","email","match","slice","undefined","usersWithInvalidMobileNumbers","mobileRegex","oldMobileNumbers","$in","oldEmailIds"],"mappings":"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","sourcesContent":["import Boom from '@hapi/boom';\nimport lodash from 'lodash';\nimport UserModel from '../models/user';\n\nexport default async function validateUsers(users) {\n  const Users = UserModel();\n  const duplicateUserIds = lodash(users.map((user) => user.userId))\n    .groupBy()\n    .pickBy((x) => x.length > 1)\n    .keys()\n    .value();\n\n  if (duplicateUserIds.length > 0) {\n    throw Boom.badRequest(\n      `Found duplicate ids in file : ${duplicateUserIds.join(', ')}`\n    );\n  }\n  const duplicateMobileNumbers = lodash(users.map((user) => user.mobileNumber))\n    .groupBy()\n    .pickBy((x) => x.length > 1)\n    .keys()\n    .value();\n  if (duplicateMobileNumbers.length > 0) {\n    throw Boom.badRequest(\n      `Found duplicate mobile numbers in file : ${duplicateMobileNumbers.join(\n        ', '\n      )}`\n    );\n  }\n\n  const oldUsers = await Users.find({\n    userId: users.map((user) => user.userId),\n  }).select('userId');\n  const oldUserIds = oldUsers.map((user) => user.userId);\n  let newUsers = users.filter((user) => oldUserIds.indexOf(user.userId) < 0);\n\n  if (newUsers.length === 0) {\n    throw Boom.badRequest('No new users found in the file');\n  }\n\n  const usersWithInvalidEmailIds = newUsers.filter((user) => {\n    const emailRegex = /^[^@]+@[^@]+\\.[^@]+$/;\n    const { email } = user;\n    const match = email.match(emailRegex);\n    return user.email !== '-' && !match;\n  });\n  if (usersWithInvalidEmailIds.length > 0)\n    throw Boom.badRequest(\n      `Invalid email is passed for users - ${usersWithInvalidEmailIds\n        .map((user) => user.userId)\n        .join(', ')}`\n    );\n\n  newUsers = newUsers.map((user) => ({\n    ...user,\n    mobileNumber: user.mobileNumber.slice(-10),\n    email: user.email === '-' ? undefined : user.email,\n  }));\n  const usersWithInvalidMobileNumbers = newUsers.filter((user) => {\n    const mobileRegex = /^[0][1-9]\\d{9}$|^[1-9]\\d{9}$/;\n    const { mobileNumber } = user;\n    const match = mobileNumber.match(mobileRegex);\n    return !match;\n  });\n\n  if (usersWithInvalidMobileNumbers.length > 0)\n    throw Boom.badRequest(\n      `Invalid mobile number is passed for users - ${usersWithInvalidMobileNumbers\n        .map((user) => user.userId)\n        .join(', ')}`\n    );\n\n  const oldMobileNumbers = await Users.find({\n    mobileNumber: { $in: newUsers.map((user) => `+91${user.mobileNumber}`) },\n  }).select('_id');\n  if (oldMobileNumbers.length > 0) {\n    throw Boom.badRequest(\n      'Found some mobile numbers which are already registered for other users'\n    );\n  }\n  const oldEmailIds = await Users.find({\n    email: newUsers.filter((user) => user.email).map((user) => user.email),\n  }).select('_id');\n  if (oldEmailIds.length > 0) {\n    throw Boom.badRequest(\n      'Some of the email ids are already registered for other users'\n    );\n  }\n  return newUsers;\n}\n"],"file":"validate_users.js"}