{"version":3,"sources":["../source/apis/users/services/get_users.js"],"names":["getUsers","divisionId","search","limit","offset","role","type","all","Users","usersInDB","usersInDBQuery","find","and","locationAccess","$elemMatch","division","$in","split","active","or","firstName","$regex","$options","lastName","userId","sort","skip","select"],"mappings":";;;;;;;AAAA;;;;AAEe,eAAeA,QAAf,CACbC,UADa,EAEbC,MAFa,EAGbC,KAHa,EAIbC,MAJa,EAKbC,IALa,EAMbC,IANa,EAObC,GAPa,EAQb;AACA,QAAMC,KAAK,GAAG,oBAAd;AACA,MAAIC,SAAS,GAAG,EAAhB;AACA,QAAMC,cAAc,GAAGF,KAAK,CAACG,IAAN,EAAvB;;AAEA,MAAIV,UAAJ,EAAgB;AACdQ,IAAAA,SAAS,GAAGC,cAAc,CAACE,GAAf,CAAmB,CAC7B;AACEC,MAAAA,cAAc,EAAE;AACdC,QAAAA,UAAU,EAAE;AACVC,UAAAA,QAAQ,EAAE;AAAEC,YAAAA,GAAG,EAAEf,UAAU,CAACgB,KAAX,CAAiB,GAAjB;AAAP;AADA;AADE;AADlB,KAD6B,CAAnB,CAAZ;AASD;;AAED,MAAI,CAACV,GAAL,EAAU;AACRE,IAAAA,SAAS,GAAGC,cAAc,CAACE,GAAf,CAAmB,CAAC;AAAEM,MAAAA,MAAM,EAAE;AAAV,KAAD,CAAnB,CAAZ;AACD;;AACD,MAAIb,IAAJ,EAAU;AACRI,IAAAA,SAAS,GAAGC,cAAc,CAACE,GAAf,CAAmB,CAAC;AAAEP,MAAAA;AAAF,KAAD,CAAnB,CAAZ;AACD;;AAED,MAAIC,IAAJ,EAAU;AACRG,IAAAA,SAAS,GAAGC,cAAc,CAACE,GAAf,CAAmB,CAAC;AAAEN,MAAAA;AAAF,KAAD,CAAnB,CAAZ;AACD;;AAED,MAAIJ,MAAJ,EAAY;AACVO,IAAAA,SAAS,GAAG,MAAMC,cAAc,CAC7BS,EADe,CACZ,CACF;AAAEC,MAAAA,SAAS,EAAE;AAAEC,QAAAA,MAAM,EAAG,GAAEnB,MAAO,EAApB;AAAuBoB,QAAAA,QAAQ,EAAE;AAAjC;AAAb,KADE,EAEF;AAAEC,MAAAA,QAAQ,EAAE;AAAEF,QAAAA,MAAM,EAAG,GAAEnB,MAAO,EAApB;AAAuBoB,QAAAA,QAAQ,EAAE;AAAjC;AAAZ,KAFE,EAGF;AAAEE,MAAAA,MAAM,EAAE;AAAEH,QAAAA,MAAM,EAAG,GAAEnB,MAAO,EAApB;AAAuBoB,QAAAA,QAAQ,EAAE;AAAjC;AAAV,KAHE,CADY,EAMfG,IANe,CAMV,CAAC,CAAC,WAAD,EAAc,KAAd,CAAD,CANU,EAOfC,IAPe,CAOVtB,MAAM,IAAI,CAPA,EAQfD,KARe,CAQTA,KAAK,IAAI,EARA,EASfwB,MATe,CASR,qDATQ,CAAlB;AAUD;;AACDlB,EAAAA,SAAS,GAAG,MAAMC,cAAc,CAC7Be,IADe,CACV,CAAC,CAAC,WAAD,EAAc,KAAd,CAAD,CADU,EAEfC,IAFe,CAEVtB,MAAM,IAAI,CAFA,EAGfD,KAHe,CAGTA,KAAK,IAAI,EAHA,EAIfwB,MAJe,CAIR,qDAJQ,CAAlB;AAKA,SAAOlB,SAAP;AACD","sourcesContent":["import UsersModel from '../models/user';\n\nexport default async function getUsers(\n  divisionId,\n  search,\n  limit,\n  offset,\n  role,\n  type,\n  all\n) {\n  const Users = UsersModel();\n  let usersInDB = [];\n  const usersInDBQuery = Users.find();\n\n  if (divisionId) {\n    usersInDB = usersInDBQuery.and([\n      {\n        locationAccess: {\n          $elemMatch: {\n            division: { $in: divisionId.split(',') },\n          },\n        },\n      },\n    ]);\n  }\n\n  if (!all) {\n    usersInDB = usersInDBQuery.and([{ active: true }]);\n  }\n  if (role) {\n    usersInDB = usersInDBQuery.and([{ role }]);\n  }\n\n  if (type) {\n    usersInDB = usersInDBQuery.and([{ type }]);\n  }\n\n  if (search) {\n    usersInDB = await usersInDBQuery\n      .or([\n        { firstName: { $regex: `${search}`, $options: 'i' } },\n        { lastName: { $regex: `${search}`, $options: 'i' } },\n        { userId: { $regex: `${search}`, $options: 'i' } },\n      ])\n      .sort([['firstName', 'asc']])\n      .skip(offset || 0)\n      .limit(limit || 20)\n      .select('userId firstName lastName mobileNumber email active');\n  }\n  usersInDB = await usersInDBQuery\n    .sort([['firstName', 'asc']])\n    .skip(offset || 0)\n    .limit(limit || 20)\n    .select('userId firstName lastName mobileNumber email active');\n  return usersInDB;\n}\n"],"file":"get_users.js"}