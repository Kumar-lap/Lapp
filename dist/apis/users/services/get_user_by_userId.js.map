{"version":3,"sources":["../source/apis/users/services/get_user_by_userId.js"],"names":["getUserByUserId","userId","Users","userInDB","findOne","populate","path","select","Boom","notFound"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEe,eAAeA,eAAf,CAA+BC,MAA/B,EAAuC;AACpD,QAAMC,KAAK,GAAG,oBAAd;AACA,QAAMC,QAAQ,GAAG,MAAMD,KAAK,CAACE,OAAN,CAAc;AAAEH,IAAAA;AAAF,GAAd,EACpBI,QADoB,CACX;AACRC,IAAAA,IAAI,EAAE,yBADE;AAERC,IAAAA,MAAM,EAAE;AAFA,GADW,EAKpBF,QALoB,CAKX;AACRC,IAAAA,IAAI,EAAE,MADE;AAERC,IAAAA,MAAM,EAAE;AAFA,GALW,CAAvB;AASA,MAAI,CAACJ,QAAL,EAAe,MAAMK,cAAKC,QAAL,CAAc,mCAAd,CAAN;AACf,SAAON,QAAP;AACD","sourcesContent":["import Boom from '@hapi/boom';\nimport UsersModel from '../models/user';\n\nexport default async function getUserByUserId(userId) {\n  const Users = UsersModel();\n  const userInDB = await Users.findOne({ userId })\n    .populate({\n      path: 'locationAccess.division',\n      select: 'locationName',\n    })\n    .populate({\n      path: 'role',\n      select: '-users',\n    });\n  if (!userInDB) throw Boom.notFound('No account found for this user id');\n  return userInDB;\n}\n"],"file":"get_user_by_userId.js"}