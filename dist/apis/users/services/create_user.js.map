{"version":3,"sources":["../source/apis/users/services/create_user.js"],"names":["createUser","user","agendaScheduler","Users","userWithSameMobileNumber","findOne","mobileNumber","userAccountInDB","userId","Boom","badRequest","email","userWithEmail","newUser","create","_id","randomPassword","Math","random","toString","slice","UserAccountServices","password","isFirstLogin","message"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEe,eAAeA,UAAf,CAA0BC,IAA1B,EAAgC;AAC7C,QAAMC,eAAe,GAAG,4BAAxB;AACA,QAAMC,KAAK,GAAG,oBAAd;AACA,QAAMC,wBAAwB,GAAG,MAAMD,KAAK,CAACE,OAAN,CAAc;AACnDC,IAAAA,YAAY,EAAEL,IAAI,CAACK;AADgC,GAAd,CAAvC;AAGA,QAAMC,eAAe,GAAG,MAAMJ,KAAK,CAACE,OAAN,CAAc;AAAEG,IAAAA,MAAM,EAAEP,IAAI,CAACO;AAAf,GAAd,CAA9B;AACA,MAAID,eAAJ,EACE,MAAME,cAAKC,UAAL,CAAgB,mCAAhB,CAAN;AACF,MAAIN,wBAAJ,EACE,MAAMK,cAAKC,UAAL,CAAgB,0CAAhB,CAAN;;AACF,MAAIT,IAAI,CAACU,KAAT,EAAgB;AACd,UAAMC,aAAa,GAAG,MAAMT,KAAK,CAACE,OAAN,CAAc;AAAEM,MAAAA,KAAK,EAAEV,IAAI,CAACU;AAAd,KAAd,CAA5B;AACA,QAAIC,aAAJ,EACE,MAAMH,cAAKC,UAAL,CAAgB,oCAAhB,CAAN;AACH;;AACD,QAAMG,OAAO,GAAG,MAAMV,KAAK,CAACW,MAAN,CAAa;AAAEC,IAAAA,GAAG,EAAEd,IAAI,CAACO,MAAZ;AAAoB,OAAGP;AAAvB,GAAb,CAAtB;AACA,QAAMe,cAAc,GAAGC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,KAA3B,CAAiC,CAAC,CAAlC,CAAvB;AACA,QAAMC,eAAoBrB,UAApB,CAA+B;AACnCQ,IAAAA,MAAM,EAAEK,OAAO,CAACL,MADmB;AAEnCc,IAAAA,QAAQ,EAAEN,cAFyB;AAGnCO,IAAAA,YAAY,EAAE;AAHqB,GAA/B,CAAN;AAKA,iCAAkBrB,eAAlB,EAAmC;AACjCI,IAAAA,YAAY,EAAEL,IAAI,CAACK,YADc;AAEjCkB,IAAAA,OAAO,EAAG,yDAAwDR,cAAe;AAFhD,GAAnC;AAIA,SAAOH,OAAP;AACD","sourcesContent":["import Boom from '@hapi/boom';\nimport UserModel from '../models/user';\nimport agenda from '../../../config/agenda_setup';\nimport { scheduleNewSmsNow } from '../../../helpers/job_scheduler/agenda';\nimport UserAccountServices from '../../auth/services/index';\n\nexport default async function createUser(user) {\n  const agendaScheduler = agenda();\n  const Users = UserModel();\n  const userWithSameMobileNumber = await Users.findOne({\n    mobileNumber: user.mobileNumber,\n  });\n  const userAccountInDB = await Users.findOne({ userId: user.userId });\n  if (userAccountInDB)\n    throw Boom.badRequest('Cannot add users with same userId');\n  if (userWithSameMobileNumber)\n    throw Boom.badRequest('This mobile number is already registered');\n  if (user.email) {\n    const userWithEmail = await Users.findOne({ email: user.email });\n    if (userWithEmail)\n      throw Boom.badRequest('This emailId is already registered');\n  }\n  const newUser = await Users.create({ _id: user.userId, ...user });\n  const randomPassword = Math.random().toString(36).slice(-8);\n  await UserAccountServices.createUser({\n    userId: newUser.userId,\n    password: randomPassword,\n    isFirstLogin: true,\n  });\n  scheduleNewSmsNow(agendaScheduler, {\n    mobileNumber: user.mobileNumber,\n    message: `Your one time login pasword for Egovernance system is ${randomPassword}`,\n  });\n  return newUser;\n}\n"],"file":"create_user.js"}