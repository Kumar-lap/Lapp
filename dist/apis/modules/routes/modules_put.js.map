{"version":3,"sources":["../source/apis/modules/routes/modules_put.js"],"names":["router","express","Router","moduleAccessSchema","body","Joi","array","items","object","moduleId","string","required","role","features","featureId","access","allow","put","baseUrl","secret","env","JWT_SECRET","getLoggedInUser","updateModuleAccess"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,GAAGC,iBAAQC,MAAR,EAAf;;AAEA,MAAMC,kBAAkB,GAAG;AACzBC,EAAAA,IAAI,EAAEC,eAAIC,KAAJ,GACHC,KADG,CAEFF,eAAIG,MAAJ,CAAW;AACTC,IAAAA,QAAQ,EAAEJ,eAAIK,MAAJ,GAAaC,QAAb,EADD;AAETC,IAAAA,IAAI,EAAEP,eAAIK,MAAJ,GAAaC,QAAb,EAFG;AAGTE,IAAAA,QAAQ,EAAER,eAAIC,KAAJ,GAAYC,KAAZ,CACRF,eAAIG,MAAJ,CAAW;AACTM,MAAAA,SAAS,EAAET,eAAIK,MAAJ,GAAaC,QAAb,EADF;AAETI,MAAAA,MAAM,EAAEV,eAAIC,KAAJ,GACLC,KADK,CACCF,eAAIK,MADL,EAELM,KAFK,CAEC,MAFD,EAES,OAFT,EAEkB,QAFlB,EAE4B,SAF5B;AAFC,KAAX,CADQ;AAHD,GAAX,CAFE,EAeHL,QAfG;AADmB,CAA3B;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CAX,MAAM,CAACiB,GAAP,CACG,GAAEC,gBAAQ,GADb,EAEE,yBAAW;AACTC,EAAAA,MAAM,EAAEC,aAAIC;AADH,CAAX,CAFF,EAKEC,0BALF,EAME,0BAAUnB,kBAAV,CANF,EAOEoB,oBAPF;eAUevB,M","sourcesContent":["import express from 'express';\nimport { Joi, celebrate } from 'celebrate';\nimport expressJWT from 'express-jwt';\nimport env from '../../../config/env';\nimport updateModuleAccess from '../controllers/modules_get';\nimport getLoggedInUser from '../../../middlewares/get_loggedIn_user';\nimport { baseUrl } from '../baseurl';\n\nconst router = express.Router();\n\nconst moduleAccessSchema = {\n  body: Joi.array()\n    .items(\n      Joi.object({\n        moduleId: Joi.string().required(),\n        role: Joi.string().required(),\n        features: Joi.array().items(\n          Joi.object({\n            featureId: Joi.string().required(),\n            access: Joi.array()\n              .items(Joi.string)\n              .allow('READ', 'WRITE', 'UPDATE', 'APPROVE'),\n          })\n        ),\n      })\n    )\n    .required(),\n};\n/**\n * @swagger\n * /modules:\n *   get:\n *     tags:\n *       - Module access\n *     description: Returns a list of modules with features\n *     consumes:\n *       - application/json\n *     produces:\n *       - application/json\n *     parameters:\n *     responses:\n *       200:\n *         description: A JSON object\n *         schema:\n *           type: array\n *           items:\n *              type: object\n *              properties:\n *                  moduleId:\n *                      type: string\n *                  features:\n *                      type: array\n *                      items:\n *                          type: object\n *                          properties:\n *                              featureId:\n *                                  type: string\n *                              access:\n *                                  type: array\n *                                  items:\n *                                      type: string\n *       400:\n *         description: Returns 400 if userId or password are invalid\n *         schema:\n *           type: object\n *           properties:\n *              statusCode:\n *                  type: number\n *                  example: 400\n *              error:\n *                  type: string\n *              message:\n *                  type: string\n */\n\nrouter.put(\n  `${baseUrl}/`,\n  expressJWT({\n    secret: env.JWT_SECRET,\n  }),\n  getLoggedInUser,\n  celebrate(moduleAccessSchema),\n  updateModuleAccess\n);\n\nexport default router;\n"],"file":"modules_put.js"}