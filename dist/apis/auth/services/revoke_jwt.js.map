{"version":3,"sources":["../source/apis/auth/services/revoke_jwt.js"],"names":["revokeJwt","userId","jwt","issueTime","cacheDBClient","keyExpiry","env","REDIS_KEY_EXPIRY","hoursOfIssueTime","Date","getHours","dateOfIssueTime","getDate","userIdHash","tokenBucketID","parseInt","lastLogOut","now","hmset","expire","refreshKeyExpiry","REDIS_REFRESH_KEY_EXPIRY","refreshTokenBucketID"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEe,SAASA,SAAT,CAAmBC,MAAnB,EAA2BC,GAA3B,EAAgC;AAC7C,QAAM;AAAEC,IAAAA;AAAF,MAAgB,wBAAUD,GAAV,CAAtB;AAEA,QAAME,aAAa,GAAG,gCAAtB;AACA,QAAMC,SAAS,GAAG,iBAAGC,aAAIC,gBAAP,IAA2B,IAA7C;AACA,QAAMC,gBAAgB,GAAG,IAAIC,IAAJ,CAASN,SAAT,EAAoBO,QAApB,EAAzB;AACA,QAAMC,eAAe,GAAG,IAAIF,IAAJ,CAASN,SAAT,EAAoBS,OAApB,EAAxB;AACA,QAAMC,UAAU,GAAG,yBAAWZ,MAAX,CAAnB;AACA,QAAMa,aAAa,GAAI,GAAEC,QAAQ,CAACF,UAAU,GAAG,GAAd,EAAmB,EAAnB,CAAuB,IAAGL,gBAAiB,EAA5E;AACA,QAAMQ,UAAU,GAAGP,IAAI,CAACQ,GAAL,EAAnB;AACAb,EAAAA,aAAa,CAACc,KAAd,CAAoBJ,aAApB,EAAmCb,MAAnC,EAA2Ce,UAA3C;AACAZ,EAAAA,aAAa,CAACe,MAAd,CAAqBL,aAArB,EAAoCT,SAApC,EAX6C,CAY7C;;AACA,QAAMe,gBAAgB,GAAG,iBAAGd,aAAIe,wBAAP,IAAmC,IAA5D;AACA,QAAMC,oBAAoB,GAAI,WAAUP,QAAQ,CAC9CF,UAAU,GAAG,GADiC,EAE9C,EAF8C,CAG9C,IAAGF,eAAgB,EAHrB;AAIAP,EAAAA,aAAa,CAACc,KAAd,CAAoBI,oBAApB,EAA0CrB,MAA1C,EAAkDe,UAAlD;AACAZ,EAAAA,aAAa,CAACe,MAAd,CAAqBG,oBAArB,EAA2CF,gBAA3C;AACD","sourcesContent":["import decodeJWT from 'jwt-decode';\nimport stringHash from 'string-hash';\nimport ms from 'ms';\nimport redisClient from '../../../config/redis_connection';\nimport env from '../../../config/env';\n\nexport default function revokeJwt(userId, jwt) {\n  const { issueTime } = decodeJWT(jwt);\n\n  const cacheDBClient = redisClient();\n  const keyExpiry = ms(env.REDIS_KEY_EXPIRY) / 1000;\n  const hoursOfIssueTime = new Date(issueTime).getHours();\n  const dateOfIssueTime = new Date(issueTime).getDate();\n  const userIdHash = stringHash(userId);\n  const tokenBucketID = `${parseInt(userIdHash / 500, 10)}-${hoursOfIssueTime}`;\n  const lastLogOut = Date.now();\n  cacheDBClient.hmset(tokenBucketID, userId, lastLogOut);\n  cacheDBClient.expire(tokenBucketID, keyExpiry);\n  // revoke refresh token\n  const refreshKeyExpiry = ms(env.REDIS_REFRESH_KEY_EXPIRY) / 1000;\n  const refreshTokenBucketID = `refresh-${parseInt(\n    userIdHash / 500,\n    10\n  )}-${dateOfIssueTime}`;\n  cacheDBClient.hmset(refreshTokenBucketID, userId, lastLogOut);\n  cacheDBClient.expire(refreshTokenBucketID, refreshKeyExpiry);\n}\n"],"file":"revoke_jwt.js"}