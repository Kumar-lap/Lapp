{"version":3,"sources":["../source/apis/auth/services/get_user_by_password_reset_uid.js"],"names":["getUserByPasswordChangeUID","uid","PasswordResetRequests","currentTime","previousDay","subtract","resetRequest","findOne","code","Boom","badRequest","expiresAt","diff","conflict","deleteMany","$lte","Date","userId"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEe,eAAeA,0BAAf,CAA0CC,GAA1C,EAA+C;AAC5D,QAAMC,qBAAqB,GAAG,oCAA9B;AACA,QAAMC,WAAW,GAAG,sBAApB;AACA,QAAMC,WAAW,GAAG,qBAAOD,WAAP,EAAoBE,QAApB,CAA6B,CAA7B,EAAgC,KAAhC,CAApB;AACA,QAAMC,YAAY,GAAG,MAAMJ,qBAAqB,CAACK,OAAtB,CAA8B;AAAEC,IAAAA,IAAI,EAAEP;AAAR,GAA9B,CAA3B;;AACA,MAAI,CAACK,YAAL,EAAmB;AACjB,UAAMG,cAAKC,UAAL,CAAgB,oBAAhB,CAAN;AACD,GAFD,MAEO,IAAI,qBAAOJ,YAAY,CAACK,SAApB,EAA+BC,IAA/B,CAAoCT,WAApC,EAAiD,SAAjD,IAA8D,CAAlE,EAAqE;AAC1E,UAAMM,cAAKI,QAAL,CAAc,qCAAd,CAAN;AACD;;AACD,QAAMX,qBAAqB,CAACY,UAAtB,CAAiC;AACrCH,IAAAA,SAAS,EAAE;AAAEI,MAAAA,IAAI,EAAE,IAAIC,IAAJ,CAASZ,WAAT;AAAR;AAD0B,GAAjC,CAAN;AAIA,SAAOE,YAAY,CAACW,MAApB;AACD","sourcesContent":["import moment from 'moment';\nimport Boom from '@hapi/boom';\nimport PasswordResetRequestModel from '../models/passwordresetrequest';\n\nexport default async function getUserByPasswordChangeUID(uid) {\n  const PasswordResetRequests = PasswordResetRequestModel();\n  const currentTime = moment();\n  const previousDay = moment(currentTime).subtract(1, 'day');\n  const resetRequest = await PasswordResetRequests.findOne({ code: uid });\n  if (!resetRequest) {\n    throw Boom.badRequest('Invalid reset code');\n  } else if (moment(resetRequest.expiresAt).diff(currentTime, 'seconds') < 0) {\n    throw Boom.conflict('Password Reset link already expired');\n  }\n  await PasswordResetRequests.deleteMany({\n    expiresAt: { $lte: new Date(previousDay) },\n  });\n\n  return resetRequest.userId;\n}\n"],"file":"get_user_by_password_reset_uid.js"}