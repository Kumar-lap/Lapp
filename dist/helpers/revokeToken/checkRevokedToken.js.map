{"version":3,"sources":["../source/helpers/revokeToken/checkRevokedToken.js"],"names":["getIsRevokedCallBackForAccessToken","client","req","payload","done","issueTime","userId","hoursOfIssueTime","Date","getHours","userIdHash","tokenBucketID","parseInt","hget","err","response","getIsRevokedCallBackForRefreshToken","dateOfIssueTime","getDate","refreshTokenBucketID"],"mappings":";;;;;;;;AAAA;;AACA;;;;AAEO,SAASA,kCAAT,GAA8C;AACnD,QAAMC,MAAM,GAAG,gCAAf;AACA,SAAO,CAACC,GAAD,EAAMC,OAAN,EAAeC,IAAf,KAAwB;AAC7B,UAAM;AAAEC,MAAAA;AAAF,QAAgBF,OAAtB;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAaH,OAAnB;AACA,UAAMI,gBAAgB,GAAG,IAAIC,IAAJ,CAASH,SAAT,EAAoBI,QAApB,EAAzB;AACA,UAAMC,UAAU,GAAG,yBAAWJ,MAAX,CAAnB;AACA,UAAMK,aAAa,GAAI,GAAEC,QAAQ,CAC/BF,UAAU,GAAG,GADkB,EAE/B,EAF+B,CAG/B,IAAGH,gBAAiB,EAHtB;AAIAN,IAAAA,MAAM,CAACY,IAAP,CAAYF,aAAZ,EAA2BL,MAA3B,EAAmC,CAACQ,GAAD,EAAMC,QAAN,KAAmB;AACpD,UAAID,GAAJ,EAAS;AACP,eAAOV,IAAI,CAACU,GAAD,CAAX;AACD;;AACD,UAAIC,QAAJ,EAAc;AACZ,YAAIV,SAAS,IAAIU,QAAjB,EAA2B;AACzB,iBAAOX,IAAI,CAAC,IAAD,EAAO,IAAP,CAAX;AACD;;AAED,eAAOA,IAAI,CAAC,IAAD,EAAO,KAAP,CAAX;AACD;;AACD,aAAOA,IAAI,CAAC,IAAD,EAAO,KAAP,CAAX;AACD,KAZD;AAaD,GAtBD;AAuBD;;AAEM,SAASY,mCAAT,GAA+C;AACpD,QAAMf,MAAM,GAAG,gCAAf;AACA,SAAO,CAACC,GAAD,EAAMC,OAAN,EAAeC,IAAf,KAAwB;AAC7B,UAAM;AAAEC,MAAAA;AAAF,QAAgBF,OAAtB;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAaH,OAAnB;AACA,UAAMc,eAAe,GAAG,IAAIT,IAAJ,CAASH,SAAT,EAAoBa,OAApB,EAAxB;AACA,UAAMR,UAAU,GAAG,yBAAWJ,MAAX,CAAnB;AACA,UAAMa,oBAAoB,GAAI,WAAUP,QAAQ,CAC9CF,UAAU,GAAG,GADiC,EAE9C,EAF8C,CAG9C,IAAGO,eAAgB,EAHrB;AAIAhB,IAAAA,MAAM,CAACY,IAAP,CAAYM,oBAAZ,EAAkCb,MAAlC,EAA0C,CAACQ,GAAD,EAAMC,QAAN,KAAmB;AAC3D,UAAID,GAAJ,EAAS;AACP,eAAOV,IAAI,CAACU,GAAD,CAAX;AACD;;AACD,UAAIC,QAAJ,EAAc;AACZ,YAAIV,SAAS,IAAIU,QAAjB,EAA2B;AACzB,iBAAOX,IAAI,CAAC,IAAD,EAAO,IAAP,CAAX;AACD;;AAED,eAAOA,IAAI,CAAC,IAAD,EAAO,KAAP,CAAX;AACD;;AACD,aAAOA,IAAI,CAAC,IAAD,EAAO,KAAP,CAAX;AACD,KAZD;AAaD,GAtBD;AAuBD","sourcesContent":["import stringHash from 'string-hash';\nimport redisClient from '../../config/redis_connection';\n\nexport function getIsRevokedCallBackForAccessToken() {\n  const client = redisClient();\n  return (req, payload, done) => {\n    const { issueTime } = payload;\n    const { userId } = payload;\n    const hoursOfIssueTime = new Date(issueTime).getHours();\n    const userIdHash = stringHash(userId);\n    const tokenBucketID = `${parseInt(\n      userIdHash / 500,\n      10\n    )}-${hoursOfIssueTime}`;\n    client.hget(tokenBucketID, userId, (err, response) => {\n      if (err) {\n        return done(err);\n      }\n      if (response) {\n        if (issueTime <= response) {\n          return done(null, true);\n        }\n\n        return done(null, false);\n      }\n      return done(null, false);\n    });\n  };\n}\n\nexport function getIsRevokedCallBackForRefreshToken() {\n  const client = redisClient();\n  return (req, payload, done) => {\n    const { issueTime } = payload;\n    const { userId } = payload;\n    const dateOfIssueTime = new Date(issueTime).getDate();\n    const userIdHash = stringHash(userId);\n    const refreshTokenBucketID = `refresh-${parseInt(\n      userIdHash / 500,\n      10\n    )}-${dateOfIssueTime}`;\n    client.hget(refreshTokenBucketID, userId, (err, response) => {\n      if (err) {\n        return done(err);\n      }\n      if (response) {\n        if (issueTime <= response) {\n          return done(null, true);\n        }\n\n        return done(null, false);\n      }\n      return done(null, false);\n    });\n  };\n}\n"],"file":"checkRevokedToken.js"}